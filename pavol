#!/bin/bash

readonly pactl=$(type -p pactl)
if [ $? -ne 0 ]; then
	echo "pactl not found." >&2
	exit 1
fi

function usage {
	local me=${0##*/}
	echo "Usage: ${me} [SINKNAME] [-|+]VOLUME[%]|toggle"
	echo "Example: ${me} -10%"
	echo "         ${me} sink-name 50%"
	echo "         ${me} toggle"
	echo "         ${me} sink-name toggle"
	echo ""
	echo "More information on the volume specification can be found in the"
	echo "pactl(1) man page."
}

function get_default_sink {
	# Assigning to a local var at the same time as declaring it will
	# break the value that $? contains, so we don't do that for the sink
	# variable.
	local sink
	sink=$(${pactl} stat \
		| grep "Default Sink")
	local found=$?
	echo "${sink##*:}"
	return ${found}
}

function get_named_sink {
	local search=$1
	local sink
	sink=$(${pactl} list short sinks \
		| grep "${search}")
	local found=$?
	sink=(${sink})
	echo ${sink[1]}
	return ${found}
}

function get_sink_command {
	local vol="$1"
	if [ "${vol}" == "toggle" ]; then
		echo "set-sink-mute"
	else
		echo "set-sink-volume"
	fi
	return 0
}

function pavoldebug {
	if [ "x${PAVOL_DEBUG}" == "x1" ]; then
		echo $1
	fi
}

function main {
	local argc=$#

	# Handle help/usage request.
	case $1 in
		--help|-h)
			usage
			exit 0
			;;
	esac

	# Figure out which sink we want to use.
	local sink
	case ${argc} in
		1)
			sink=$(get_default_sink)
			if [ $? -ne 0 ]; then
				echo "Couldn't find default sink." >&2
				exit 1
			fi
			;;
		2)
			sink=$(get_named_sink $1)
			if [ $? -ne 0 ]; then
				echo "Couldn't find sink named '$1'." >&2
				exit 1
			fi
			;;
		*)
			usage
			exit 1
			;;
	esac

	# Toggling or setting volume? Volume is always the last arg.
	local volume="${@: -1}"

	# Get sink command based on the "volume" being set.
	local cmd=$(get_sink_command $volume)

	# Occasionally helpful debug output
	pavoldebug "C: ${cmd}. S: ${sink}. V: ${volume}."

	# Finally set the volume and exit with pactl status.
	${pactl} ${cmd} ${sink} -- ${volume}
	exit $?
}
main $@
