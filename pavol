#!/bin/bash
# pavol: simple command line interface for setting PulseAudio volume.

pactl=$(type -p pactl)
if [ $? -ne 0 ]; then
	echo "pactl not found." >&2
	exit 1
fi
readonly pactl

function usage {
	local -r me=${0##*/}
	echo "Usage: ${me} [SINKNAME] [-|+]VOLUME[%]|toggle|status"
	echo "Example: ${me} -10%"
	echo "         ${me} sink-name 50%"
	echo "         ${me} toggle"
	echo "         ${me} sink-name status"
	echo ""
	echo "More information on the volume specification can be found in the"
	echo "pactl(1) man page."
}

# Outputs the name of the default PulseAudio sink.
# Returns 0 on success, 1 on failure.
function get_default_sink {
	# Assigning to a local var at the same time as declaring it will
	# break the value that $? contains, so we don't do that for the sink
	# variable.
	local sink
	sink=$(${pactl} stat \
		| grep "Default Sink")
	local -r found=$?
	if [ ${found} -eq 0 ]; then
		echo "${sink##*: }"
	fi
	return ${found}
}

# Outputs the full name of the named sink.
# Returns 0 on success, 1 on failure.
function get_named_sink {
	local -r search="$1"
	local sink
	sink=$(${pactl} list short sinks \
		| grep "${search}")
	local -r found=$?
	sink=(${sink})
	if [ ${found} -eq 0 ]; then
		echo ${sink[1]}
	fi
	return ${found}
}

# Outputs the needed sink command based on the volume.
# Returns 0.
function get_sink_command {
	local -r vol="$1"
	if [ "${vol}" == "toggle" ]; then
		echo "set-sink-mute"
	else
		echo "set-sink-volume"
	fi
	return 0
}

# Output the volume of the given sink.
# Returns 0 on success.
function get_volume {
	local -r sink="$1"
	# Process pactl output to work out volume.
	# On each line we have to check if we found the sink name we want, if
	# we did we can start looking for the volume.
	local found
	local muted
	local volume
	while read line; do
		case "${line}" in
			Name:*)
				grep "${sink}" <<<"${line}" >/dev/null 2>&1
				found=$?
				;;
			Mute:*)
				if [ "${found}" -eq 0 ]; then
					muted="${line##*: }"
				fi
				;;
			Volume:*)
				if [ "${found}" -eq 0 ]; then
					local -r vol_line=(${line})
					volume=${vol_line[4]}
					break
				fi
				;;
		esac
	done < <(${pactl} list sinks)
	if [ ${found} -eq 0 ]; then
		if [ "${muted}" == "yes" ]; then
			volume="♩${volume}"
		else
			volume="♫${volume}"
		fi
		# This is the volume of the left speaker, which should be good
		# enough.
		echo ${volume}
	fi
	return ${found}
}

# Outputs the given line to stdout if PAVOL_DEBUG is set.
# Returns 0.
function pavol_debug {
	local -r line="$1"
	if [ -v PAVOL_DEBUG ]; then
		echo "$line"
	fi
	return 0
}

function main {
	local -r argc=$#

	# Handle help/usage request.
	case $1 in
		--help|-h)
			usage
			exit 0
			;;
	esac

	# Figure out which sink we want to use.
	local sink
	case ${argc} in
		1)
			sink=$(get_default_sink)
			if [ $? -ne 0 ]; then
				echo "Couldn't find default sink." >&2
				exit 1
			fi
			;;
		2)
			sink=$(get_named_sink $1)
			if [ $? -ne 0 ]; then
				echo "Couldn't find sink named '$1'." >&2
				exit 1
			fi
			;;
		*)
			usage
			exit 1
			;;
	esac

	# Toggle, set or status?
	local cmd
	local volume
	local -r last_arg="${@: -1}"
	case "${last_arg}" in
		status)
			get_volume "${sink}"
			exit 0
			;;
		*)
			volume="${last_arg}"
			readonly volume
			;;
	esac

	# Get sink command based on the "volume" being set.
	local -r cmd=$(get_sink_command $volume)

	# Occasionally helpful debug output
	pavol_debug "C: ${cmd}. S: ${sink}. V: ${volume}."

	# Finally set the volume and exit with pactl status.
	${pactl} ${cmd} ${sink} -- ${volume}
	exit $?
}
main $@
